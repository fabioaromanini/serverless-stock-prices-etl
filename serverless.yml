service: serverless-etl

provider:
  name: google
  runtime: nodejs10
  region: us-east1
  project: etl-data-meetup
  # The GCF credentials can be a little tricky to set up. Luckily we've documented this for you here:
  # https://serverless.com/framework/docs/providers/google/guide/credentials/
  #
  # the path to the credentials file needs to be absolute
  credentials: ~/.gcloud/keyfile.json
  environment:
    DAILY_INFO_TOPIC: ${self:custom.dailyInfoTopicName}
    BASE_URL: 'https://www.alphavantage.co/query'

plugins:
  - serverless-google-cloudfunctions

package:
  exclude:
    - node_modules/**
    - .gitignore
    - .git/**

custom:
  dailyInfoTopicName: dailyInfoTopic
  minuteLoaderTopicName: minuteLoaderTopic

functions:
  dailyInfo:
    handler: dailyInfo
    events:
      - event:
          eventType: providers/cloud.pubsub/eventTypes/topic.publish
          resource: projects/${self:provider.project}/topics/${self:custom.dailyInfoTopicName}

  minuteLoader:
    handler: minuteLoader
    events:
      - event:
          eventType: providers/cloud.pubsub/eventTypes/topic.publish
          resource: projects/${self:provider.project}/topics/${self:custom.minuteLoaderTopicName}
  
  apiResponseFilter:
    handler: apiResponseFilter
    events:
      - event:
          eventType: google.storage.object.finalize
          resource: projects/${self:provider.project}/buckets/api-responses

resources:
  resources:
    - name: api-responses
      type: storage.v1.bucket
      properties:
        project: ${self:provider.project}
        name: api-responses
        lifecycle:
          rule:
          - action:
              type: Delete
            condition:
              age: 2
    - name: ${self:custom.dailyInfoTopicName}
      type: pubsub.v1.topic
      properties:
        topic: ${self:custom.dailyInfoTopicName}
    - name: ${self:custom.minuteLoaderTopicName}
      type: pubsub.v1.topic
      properties:
        topic: ${self:custom.minuteLoaderTopicName}
